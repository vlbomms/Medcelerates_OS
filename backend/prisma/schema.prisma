datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  password         String
  isPaidMember     Boolean  @default(false)
  stripeCustomerId String?  @unique
  stripePaymentIntentId String?  @unique
  
  // New trial-related field
  trialStartDate   DateTime?
  trialEndDate     DateTime?
  // Existing subscription-related fields
  subscriptionType   SubscriptionType?
  subscriptionLength SubscriptionLength?
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  lastSubscriptionEndDate   DateTime?  // Track when the last paid subscription ended
  lastRenewalDate        DateTime?  // Track the most recent subscription renewal date
  lastSubscriptionUpdateDate DateTime?  // Track the most recent subscription update
  // Existing refresh token management fields
  refreshToken     String?  // Store the latest refresh token
  refreshTokenIssuedAt DateTime?
  refreshTokenExpiresAt DateTime?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  tests            Test[]
}

// In /Users/vikasbommineni/test-prep-platform/backend/prisma/schema.prisma
model Test {
  id               String         @id @default(uuid())
  testId           String         @unique @default(cuid())
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  status           TestStatus     @default(IN_PROGRESS)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  completedAt      DateTime?
  
  // Add these fields
  totalTestDuration Int           @default(3600)  // Default 1 hour in seconds
  startTime         DateTime?     // When the test was first started
  pausedTime        DateTime?     // When the test was paused
  remainingSeconds  Int?          // Remaining time when paused or continuing
  score            Float?         // Optional score field
  
  testQuestions    TestQuestion[]
}

enum TestStatus {
  IN_PROGRESS
  COMPLETED
}

model TestQuestion {
  id         String    @id @default(uuid())
  testId     String
  test       Test      @relation(fields: [testId], references: [id])
  questionId String
  question   Question  @relation(fields: [questionId], references: [id])
  userAnswer String?   // the user's chosen answer
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Question {
  id                String   @id // can be your 12-char question ID or "P..." for passages
  subject           String?
  unit              String?
  isPassage         Boolean  // true if this is a passage
  passageId         String?  // references a passage if this is a sub-question
  passage           Question?  @relation("PassageToQuestions", fields: [passageId], references: [id])
  subQuestions      Question[] @relation("PassageToQuestions")

  // If isPassage = true, store the passage text here
  passageHtml       String?

  // For standalone or sub-questions
  questionHtml      String?  // question stem
  answerChoicesHtml String?  // contains all choices + correct one marked data-correct="true"
  explanationHtml   String?  // explanation shown post-submission

  // Store images if needed (base64 or references)
  images            Json?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  testQuestions   TestQuestion[]
}

// New enums for subscription types and lengths
enum SubscriptionType {
  ONE_TIME
}

enum SubscriptionLength {
  ONE_MONTH
  THREE_MONTHS
}